{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TOSCA hands on session Contacts Marica Antonacci (marica.antonacci@ba.infn.it) Hands-on guide Overview Environment setup: Configure oidc-agent Configure orchent Run your first deployment: Hello world TOSCA template Example: Elasticsearch + Kibana template Appendix: TOSCA Usage Guide","title":"Home"},{"location":"#tosca-hands-on-session","text":"","title":"TOSCA hands on session"},{"location":"#contacts","text":"Marica Antonacci (marica.antonacci@ba.infn.it)","title":"Contacts"},{"location":"#hands-on-guide","text":"Overview Environment setup: Configure oidc-agent Configure orchent Run your first deployment: Hello world TOSCA template Example: Elasticsearch + Kibana template Appendix: TOSCA Usage Guide","title":"Hands-on guide"},{"location":"orchestrator/elasticsearch_example/","text":"\u25c0 Installing Elasticsearch and Kibana with ansible Elasticsearch playbook 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - name : Simple Elasticsearch Example hosts : localhost roles : - role : elastic.elasticsearch vars : es_version : 7.4.1 es_config : network.bind_host : 0.0.0.0 discovery.type : single-node es_enable_xpack : true es_api_basic_auth_username : elastic es_api_basic_auth_password : 12qwas es_users : native : kibana : Kibana playbook 1 2 3 4 5 6 7 8 - name : Simple Kibana Example hosts : localhost roles : - role : geerlingguy.kibana vars : kibana_version : 7.4.1 kibana_elasticsearch_username : kibana kibana_elasticsearch_password : 12qwas Modeling the topology with TOSCA Elasticsearch SoftwareComponent node tosca template excerpt 1 2 3 4 5 6 7 8 9 elasticsearch : type : tosca.nodes.indigo.Elasticsearch properties : es_version : { get_input : es_version } bind_address : { get_input : es_bind_address } elastic_password : { get_input : es_password } kibana_system_password : { get_input : kibana_password } requirements : - host : server tosca custom type 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 tosca.nodes.indigo.Elasticsearch : derived_from : tosca.nodes.SoftwareComponent properties : es_version : type : string required : false default : 7.4.1 bind_address : type : string required : false default : 0.0.0.0 discovery_type : type : string required : false default : single-node enable_security : type : boolean default : true required : false elastic_password : type : string required : false default : changeme kibana_system_password : type : string required : false default : changeme artifacts : es_role : file : elastic.elasticsearch,7.4.1 type : tosca.artifacts.AnsibleGalaxy.role interfaces : Standard : configure : implementation : https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/artifacts/elk/elasticsearch_install.yml inputs : es_version : { get_property : [ SELF , es_version ] } bind_host : { get_property : [ SELF , bind_address ] } discovery_type : { get_property : [ SELF , discovery_type ] } enable_security : { get_property : [ SELF , enable_security ] } elastic_password : { get_property : [ SELF , elastic_password ] } kibana_system_password : { get_property : [ SELF , kibana_system_password ] } ansible artefact 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 --- - hosts : localhost connection : local vars : es_config : network.bind_host : \"{{ bind_host }}\" discovery.type : \"{{ discovery_type }}\" es_enable_xpack : \"{{ enable_security }}\" es_api_basic_auth_username : elastic es_api_basic_auth_password : \"{{ elastic_password }}\" es_users : native : kibana : password : \"{{ kibana_system_password }}\" roles : - role : elastic.elasticsearch Kibana SoftwareComponent node tosca template excerpt 1 2 3 4 5 6 7 8 kibana : type : tosca.nodes.indigo.Kibana properties : kibana_version : { get_input : es_version } elasticsearch_password : { get_input : kibana_password } requirements : - host : server - dependency : elasticsearch tosca custom type 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 tosca.nodes.indigo.Kibana : derived_from : tosca.nodes.SoftwareComponent properties : kibana_version : type : string required : false default : 7.4.1 elasticsearch_url : type : string required : false default : \"http://localhost:9200\" elasticsearch_username : type : string required : false default : kibana elasticsearch_password : type : string required : false default : changeme artifacts : es_role : file : maricaantonacci.kibana,7.4.1 type : tosca.artifacts.AnsibleGalaxy.role interfaces : Standard : configure : implementation : https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/artifacts/elk/kibana_install.yml inputs : kibana_version : { get_property : [ SELF , kibana_version ] } kibana_elasticsearch_url : { get_property : [ SELF , elasticsearch_url ] } kibana_elasticsearch_username : { get_property : [ SELF , elasticsearch_username ] } kibana_elasticsearch_password : { get_property : [ SELF , elasticsearch_password ] } ansible artefact 1 2 3 4 5 6 --- - hosts : localhost connection : local vars : roles : - role : maricaantonacci.kibana Now let's build the full topology template, adding the server node(s). Don't forget to request port 5601 for accessing kibana dashboard! 1. All-in-One installation 1 Click on the \"TOSCA template\" tab to see a possible solution. TOSCA template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 tosca_definitions_version : tosca_simple_yaml_1_0 imports : - indigo_custom_types : https://raw.githubusercontent.com/maricaantonacci/tosca-types/k8s/custom_types.yaml description : > Start Elasticsearch + Kibana on a Virtual Machine topology_template : inputs : num_cpus : type : integer description : Number of virtual cpus for the VM default : 2 constraints : - valid_values : [ 2 , 4 ] mem_size : type : scalar-unit.size description : Amount of memory for the VM default : 4 GB constraints : - valid_values : [ 4 GB , 8 GB ] es_version : type : string default : 7.4.1 description : Elasticsearch version es_bind_address : type : string default : 0.0.0.0 description : Bind address for Elasticsearch service es_password : type : string required : true description : Password for user elastic kibana_password : type : string required : true description : Password for kibana system user node_templates : elasticsearch : type : tosca.nodes.indigo.Elasticsearch properties : es_version : { get_input : es_version } bind_address : { get_input : es_bind_address } elastic_password : { get_input : es_password } kibana_system_password : { get_input : kibana_password } requirements : - host : kibana_es_server kibana : type : tosca.nodes.indigo.Kibana properties : kibana_version : { get_input : es_version } elasticsearch_password : { get_input : kibana_password } requirements : - host : kibana_es_server - esearch_endpoint : elasticsearch kibana_es_server : type : tosca.nodes.indigo.Compute capabilities : endpoint : properties : network_name : PUBLIC ports : kibana : protocol : tcp source : 5601 host : properties : num_cpus : { get_input : num_cpus } mem_size : { get_input : mem_size } os : properties : distribution : ubuntu type : linux version : 16.04 outputs : kibana_endpoint : value : { concat : [ 'http://' , get_attribute : [ kibana_es_server , public_address , 0 ], ':5601' ] } node_ip : value : { get_attribute : [ kibana_es_server , public_address , 0 ] } node_creds : value : { get_attribute : [ kibana_es_server , endpoint , credential , 0 ] } 2. Installation on separate servers 1 Click on the \"TOSCA template\" tab to see a possible solution. TOSCA template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 tosca_definitions_version : tosca_simple_yaml_1_0 imports : - indigo_custom_types : https://raw.githubusercontent.com/maricaantonacci/tosca-types/k8s/custom_types.yaml description : > Start Elasticsearch + Kibana on separate Virtual Machines topology_template : inputs : num_cpus : type : integer description : Number of virtual cpus for the VM default : 2 constraints : - valid_values : [ 2 , 4 ] mem_size : type : scalar-unit.size description : Amount of memory for the VM default : 4 GB constraints : - valid_values : [ 4 GB , 8 GB ] es_version : type : string default : 7.4.1 description : Elasticsearch version es_bind_address : type : string default : 0.0.0.0 description : Bind address for Elasticsearch service es_password : type : string required : true description : Password for user elastic kibana_password : type : string required : true description : Password for kibana system user node_templates : elasticsearch : type : tosca.nodes.indigo.Elasticsearch properties : es_version : { get_input : es_version } bind_address : { get_input : es_bind_address } elastic_password : { get_input : es_password } kibana_system_password : { get_input : kibana_password } requirements : - host : es_server kibana : type : tosca.nodes.indigo.Kibana properties : kibana_version : { get_input : es_version } elasticsearch_password : { get_input : kibana_password } elasticsearch_url : { concat : [ 'http://' , { get_attribute : [ es_server , private_address , 0 ] }, \":9200\" ] } requirements : - host : kibana_server - esearch_endpoint : elasticsearch es_server : type : tosca.nodes.indigo.Compute capabilities : host : properties : num_cpus : { get_input : num_cpus } mem_size : { get_input : mem_size } os : properties : distribution : ubuntu type : linux version : 16.04 kibana_server : type : tosca.nodes.indigo.Compute capabilities : endpoint : properties : network_name : PUBLIC ports : kibana : protocol : tcp source : 5601 host : properties : num_cpus : { get_input : num_cpus } mem_size : { get_input : mem_size } os : properties : distribution : ubuntu type : linux version : 16.04 outputs : kibana_endpoint : value : { concat : [ 'http://' , get_attribute : [ kibana_server , public_address , 0 ], ':5601' ] } kibana_node_ip : value : { get_attribute : [ kibana_server , public_address , 0 ] } kibana_node_creds : value : { get_attribute : [ kibana_server , endpoint , credential , 0 ] } Run the deployment Choose one of the two topologies and submit the template to the Orchestrator: 1 orchent depcreate template.yml '{ \"es_password\": \"****\", \"kibana_password\": \"****\" }' Monitor the status of the deployment: 1 orchent depshow <dep UUID> You could also connect to the dashboard to follow the deployment log: dashboard URL: https://dodas-paas.cloud.ba.infn.it What do you see in the log?","title":"Example - Elasticsearch template"},{"location":"orchestrator/elasticsearch_example/#_1","text":"","title":"\u25c0"},{"location":"orchestrator/elasticsearch_example/#installing-elasticsearch-and-kibana-with-ansible","text":"Elasticsearch playbook 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - name : Simple Elasticsearch Example hosts : localhost roles : - role : elastic.elasticsearch vars : es_version : 7.4.1 es_config : network.bind_host : 0.0.0.0 discovery.type : single-node es_enable_xpack : true es_api_basic_auth_username : elastic es_api_basic_auth_password : 12qwas es_users : native : kibana : Kibana playbook 1 2 3 4 5 6 7 8 - name : Simple Kibana Example hosts : localhost roles : - role : geerlingguy.kibana vars : kibana_version : 7.4.1 kibana_elasticsearch_username : kibana kibana_elasticsearch_password : 12qwas","title":"Installing Elasticsearch and Kibana with ansible"},{"location":"orchestrator/elasticsearch_example/#modeling-the-topology-with-tosca","text":"","title":"Modeling the topology with TOSCA"},{"location":"orchestrator/elasticsearch_example/#elasticsearch-softwarecomponent-node","text":"tosca template excerpt 1 2 3 4 5 6 7 8 9 elasticsearch : type : tosca.nodes.indigo.Elasticsearch properties : es_version : { get_input : es_version } bind_address : { get_input : es_bind_address } elastic_password : { get_input : es_password } kibana_system_password : { get_input : kibana_password } requirements : - host : server tosca custom type 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 tosca.nodes.indigo.Elasticsearch : derived_from : tosca.nodes.SoftwareComponent properties : es_version : type : string required : false default : 7.4.1 bind_address : type : string required : false default : 0.0.0.0 discovery_type : type : string required : false default : single-node enable_security : type : boolean default : true required : false elastic_password : type : string required : false default : changeme kibana_system_password : type : string required : false default : changeme artifacts : es_role : file : elastic.elasticsearch,7.4.1 type : tosca.artifacts.AnsibleGalaxy.role interfaces : Standard : configure : implementation : https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/artifacts/elk/elasticsearch_install.yml inputs : es_version : { get_property : [ SELF , es_version ] } bind_host : { get_property : [ SELF , bind_address ] } discovery_type : { get_property : [ SELF , discovery_type ] } enable_security : { get_property : [ SELF , enable_security ] } elastic_password : { get_property : [ SELF , elastic_password ] } kibana_system_password : { get_property : [ SELF , kibana_system_password ] } ansible artefact 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 --- - hosts : localhost connection : local vars : es_config : network.bind_host : \"{{ bind_host }}\" discovery.type : \"{{ discovery_type }}\" es_enable_xpack : \"{{ enable_security }}\" es_api_basic_auth_username : elastic es_api_basic_auth_password : \"{{ elastic_password }}\" es_users : native : kibana : password : \"{{ kibana_system_password }}\" roles : - role : elastic.elasticsearch","title":"Elasticsearch SoftwareComponent node"},{"location":"orchestrator/elasticsearch_example/#kibana-softwarecomponent-node","text":"tosca template excerpt 1 2 3 4 5 6 7 8 kibana : type : tosca.nodes.indigo.Kibana properties : kibana_version : { get_input : es_version } elasticsearch_password : { get_input : kibana_password } requirements : - host : server - dependency : elasticsearch tosca custom type 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 tosca.nodes.indigo.Kibana : derived_from : tosca.nodes.SoftwareComponent properties : kibana_version : type : string required : false default : 7.4.1 elasticsearch_url : type : string required : false default : \"http://localhost:9200\" elasticsearch_username : type : string required : false default : kibana elasticsearch_password : type : string required : false default : changeme artifacts : es_role : file : maricaantonacci.kibana,7.4.1 type : tosca.artifacts.AnsibleGalaxy.role interfaces : Standard : configure : implementation : https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/artifacts/elk/kibana_install.yml inputs : kibana_version : { get_property : [ SELF , kibana_version ] } kibana_elasticsearch_url : { get_property : [ SELF , elasticsearch_url ] } kibana_elasticsearch_username : { get_property : [ SELF , elasticsearch_username ] } kibana_elasticsearch_password : { get_property : [ SELF , elasticsearch_password ] } ansible artefact 1 2 3 4 5 6 --- - hosts : localhost connection : local vars : roles : - role : maricaantonacci.kibana Now let's build the full topology template, adding the server node(s). Don't forget to request port 5601 for accessing kibana dashboard!","title":"Kibana SoftwareComponent node"},{"location":"orchestrator/elasticsearch_example/#1-all-in-one-installation","text":"1 Click on the \"TOSCA template\" tab to see a possible solution. TOSCA template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 tosca_definitions_version : tosca_simple_yaml_1_0 imports : - indigo_custom_types : https://raw.githubusercontent.com/maricaantonacci/tosca-types/k8s/custom_types.yaml description : > Start Elasticsearch + Kibana on a Virtual Machine topology_template : inputs : num_cpus : type : integer description : Number of virtual cpus for the VM default : 2 constraints : - valid_values : [ 2 , 4 ] mem_size : type : scalar-unit.size description : Amount of memory for the VM default : 4 GB constraints : - valid_values : [ 4 GB , 8 GB ] es_version : type : string default : 7.4.1 description : Elasticsearch version es_bind_address : type : string default : 0.0.0.0 description : Bind address for Elasticsearch service es_password : type : string required : true description : Password for user elastic kibana_password : type : string required : true description : Password for kibana system user node_templates : elasticsearch : type : tosca.nodes.indigo.Elasticsearch properties : es_version : { get_input : es_version } bind_address : { get_input : es_bind_address } elastic_password : { get_input : es_password } kibana_system_password : { get_input : kibana_password } requirements : - host : kibana_es_server kibana : type : tosca.nodes.indigo.Kibana properties : kibana_version : { get_input : es_version } elasticsearch_password : { get_input : kibana_password } requirements : - host : kibana_es_server - esearch_endpoint : elasticsearch kibana_es_server : type : tosca.nodes.indigo.Compute capabilities : endpoint : properties : network_name : PUBLIC ports : kibana : protocol : tcp source : 5601 host : properties : num_cpus : { get_input : num_cpus } mem_size : { get_input : mem_size } os : properties : distribution : ubuntu type : linux version : 16.04 outputs : kibana_endpoint : value : { concat : [ 'http://' , get_attribute : [ kibana_es_server , public_address , 0 ], ':5601' ] } node_ip : value : { get_attribute : [ kibana_es_server , public_address , 0 ] } node_creds : value : { get_attribute : [ kibana_es_server , endpoint , credential , 0 ] }","title":"1. All-in-One installation"},{"location":"orchestrator/elasticsearch_example/#2-installation-on-separate-servers","text":"1 Click on the \"TOSCA template\" tab to see a possible solution. TOSCA template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 tosca_definitions_version : tosca_simple_yaml_1_0 imports : - indigo_custom_types : https://raw.githubusercontent.com/maricaantonacci/tosca-types/k8s/custom_types.yaml description : > Start Elasticsearch + Kibana on separate Virtual Machines topology_template : inputs : num_cpus : type : integer description : Number of virtual cpus for the VM default : 2 constraints : - valid_values : [ 2 , 4 ] mem_size : type : scalar-unit.size description : Amount of memory for the VM default : 4 GB constraints : - valid_values : [ 4 GB , 8 GB ] es_version : type : string default : 7.4.1 description : Elasticsearch version es_bind_address : type : string default : 0.0.0.0 description : Bind address for Elasticsearch service es_password : type : string required : true description : Password for user elastic kibana_password : type : string required : true description : Password for kibana system user node_templates : elasticsearch : type : tosca.nodes.indigo.Elasticsearch properties : es_version : { get_input : es_version } bind_address : { get_input : es_bind_address } elastic_password : { get_input : es_password } kibana_system_password : { get_input : kibana_password } requirements : - host : es_server kibana : type : tosca.nodes.indigo.Kibana properties : kibana_version : { get_input : es_version } elasticsearch_password : { get_input : kibana_password } elasticsearch_url : { concat : [ 'http://' , { get_attribute : [ es_server , private_address , 0 ] }, \":9200\" ] } requirements : - host : kibana_server - esearch_endpoint : elasticsearch es_server : type : tosca.nodes.indigo.Compute capabilities : host : properties : num_cpus : { get_input : num_cpus } mem_size : { get_input : mem_size } os : properties : distribution : ubuntu type : linux version : 16.04 kibana_server : type : tosca.nodes.indigo.Compute capabilities : endpoint : properties : network_name : PUBLIC ports : kibana : protocol : tcp source : 5601 host : properties : num_cpus : { get_input : num_cpus } mem_size : { get_input : mem_size } os : properties : distribution : ubuntu type : linux version : 16.04 outputs : kibana_endpoint : value : { concat : [ 'http://' , get_attribute : [ kibana_server , public_address , 0 ], ':5601' ] } kibana_node_ip : value : { get_attribute : [ kibana_server , public_address , 0 ] } kibana_node_creds : value : { get_attribute : [ kibana_server , endpoint , credential , 0 ] }","title":"2. Installation on separate servers"},{"location":"orchestrator/elasticsearch_example/#run-the-deployment","text":"Choose one of the two topologies and submit the template to the Orchestrator: 1 orchent depcreate template.yml '{ \"es_password\": \"****\", \"kibana_password\": \"****\" }' Monitor the status of the deployment: 1 orchent depshow <dep UUID> You could also connect to the dashboard to follow the deployment log: dashboard URL: https://dodas-paas.cloud.ba.infn.it What do you see in the log?","title":"Run the deployment"},{"location":"orchestrator/oidc_agent/","text":"\u25c0 Setup oidc-agent oidc-agent is a set of tools to manage OpenID Connect tokens and make them easily usable from the command line. We followed the ssh-agent design, so users can handle OIDC tokens in a similiar way as they do with ssh keys. Admin and user guides are available here Installation 1 2 3 4 wget https://github.com/indigo-dc/oidc-agent/releases/download/v3.2.7/oidc-agent-3.2.7-1.el7.x86_64.rpm sudo yum install libmicrohttpd libsodium sudo rpm -i oidc-agent-3.2.7-1.el7.x86_64.rpm oidc-agent --version Edit your .bashrc to make oidc-agent persistent, adding the following line: 1 test -e ~/.oidc-agent.env && . ~/.oidc-agent.env Then run the agent as follows: 1 oidc-agent > ~/.oidc-agent.env and load the environment again: 1 source ~/.bashrc Account Configuration Attention You need to have a valid account in DODAS IAM to proceed with the configuration. oidc-gen is used to generate new account configurations. Account configurations are identified by a shortname. This shortname can be set to anything, but it is recommended to use a descriptive name of the provider / account used. E.g. dodas Run the following command: 1 oidc-gen --flow device dodas You will get the following output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [ 1 ] https://iam-test.indigo-datacloud.eu/ [ 2 ] https://iam.deep-hybrid-datacloud.eu/ [ 3 ] https://iam.extreme-datacloud.eu/ [ 4 ] https://iam-demo.cloud.cnaf.infn.it/ [ 5 ] https://b2access.eudat.eu/oauth2/ [ 6 ] https://b2access-integration.fz-juelich.de/oauth2 [ 7 ] https://unity.eudat-aai.fz-juelich.de/oauth2/ [ 8 ] https://unity.helmholtz-data-federation.de/oauth2/ [ 9 ] https://login.helmholtz-data-federation.de/oauth2/ [ 10 ] https://services.humanbrainproject.eu/oidc/ [ 11 ] https://accounts.google.com/ [ 12 ] https://aai.egi.eu/oidc/ [ 13 ] https://aai-dev.egi.eu/oidc [ 14 ] https://login.elixir-czech.org/oidc/ [ 15 ] https://oidc.scc.kit.edu/auth/realms/kit/ Issuer [ https://iam-test.indigo-datacloud.eu/ ] : Provide the DODAS IAM url: https://dodas-iam.cloud.cnaf.infn.it/ Warning The trailing / in the issuer is very important! Don't forget it. Then you will asked for the following: 1 2 This issuer supports the following scopes: openid profile email address phone offline_access Space delimited list of scopes or 'max' [ openid profile offline_access ] : You can just type ENTER since the suggested scopes are sufficient for our purposes. After that, you will get the following output: 1 2 3 4 5 6 7 8 Registering Client ... Generating account configuration ... accepted Using a browser on another device, visit: https://dodas-iam.cloud.cnaf.infn.it/device And enter the code: UU2F47 As suggested, open your browser and follow the link, then enter the code. You will be asked to approve the registered client as shown in the image below. After your approval, the oidc_gen command will automatically move to the next step allowing you to set an optional password for configuration encryption: 1 2 Enter encryption password for account configuration 'dodas' : Confirm encryption Password: Test the configuration In order to verify the correct setup, try to get a token using the oidc-token command: 1 oidc-token dodas If everything is working fine you will get your token in the command output. E.g.: 1 2 $ oidc-token dodas eyJraWQiOiJyc2ExIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIyMzc0MzI5NC1jODg0LTQyMTAtYjAzMy05MGFkNWFhMTcwZDgiLCJpc3MiOiJodHRwczpcL1wvZG9kYXMtaWFtLmNsb3VkLmNuYWYuaW5mbi5pdFwvIiwiZXhwIjoxNTc0MzUyMDY3LCJpYXQiOjE1NzQzNDg0NjcsImp0aSI6ImNmZTcxNTVkLTNlNWMtNDNiNy04MDZiLTM2MTVhZTJmNWJlYSJ9.B9WovoH0dnuOqoLKlOCcSzrshTpADzdtAf_J_kapPGpj4eI_TkKVk-r_trefPACv_fI656UukCcK5aJtv4_vn6iiAy2x0nCy6lwNNhCJcYJHmn2n-XaqeT6-YM9tyMFjKFusXMLVIoGAQAt_RlfivX8kpNXAmEsEUgOTwHPp9yc","title":"Configure oidc-agent"},{"location":"orchestrator/oidc_agent/#_1","text":"","title":"\u25c0"},{"location":"orchestrator/oidc_agent/#setup-oidc-agent","text":"oidc-agent is a set of tools to manage OpenID Connect tokens and make them easily usable from the command line. We followed the ssh-agent design, so users can handle OIDC tokens in a similiar way as they do with ssh keys. Admin and user guides are available here","title":"Setup oidc-agent"},{"location":"orchestrator/oidc_agent/#installation","text":"1 2 3 4 wget https://github.com/indigo-dc/oidc-agent/releases/download/v3.2.7/oidc-agent-3.2.7-1.el7.x86_64.rpm sudo yum install libmicrohttpd libsodium sudo rpm -i oidc-agent-3.2.7-1.el7.x86_64.rpm oidc-agent --version Edit your .bashrc to make oidc-agent persistent, adding the following line: 1 test -e ~/.oidc-agent.env && . ~/.oidc-agent.env Then run the agent as follows: 1 oidc-agent > ~/.oidc-agent.env and load the environment again: 1 source ~/.bashrc","title":"Installation"},{"location":"orchestrator/oidc_agent/#account-configuration","text":"Attention You need to have a valid account in DODAS IAM to proceed with the configuration. oidc-gen is used to generate new account configurations. Account configurations are identified by a shortname. This shortname can be set to anything, but it is recommended to use a descriptive name of the provider / account used. E.g. dodas Run the following command: 1 oidc-gen --flow device dodas You will get the following output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [ 1 ] https://iam-test.indigo-datacloud.eu/ [ 2 ] https://iam.deep-hybrid-datacloud.eu/ [ 3 ] https://iam.extreme-datacloud.eu/ [ 4 ] https://iam-demo.cloud.cnaf.infn.it/ [ 5 ] https://b2access.eudat.eu/oauth2/ [ 6 ] https://b2access-integration.fz-juelich.de/oauth2 [ 7 ] https://unity.eudat-aai.fz-juelich.de/oauth2/ [ 8 ] https://unity.helmholtz-data-federation.de/oauth2/ [ 9 ] https://login.helmholtz-data-federation.de/oauth2/ [ 10 ] https://services.humanbrainproject.eu/oidc/ [ 11 ] https://accounts.google.com/ [ 12 ] https://aai.egi.eu/oidc/ [ 13 ] https://aai-dev.egi.eu/oidc [ 14 ] https://login.elixir-czech.org/oidc/ [ 15 ] https://oidc.scc.kit.edu/auth/realms/kit/ Issuer [ https://iam-test.indigo-datacloud.eu/ ] : Provide the DODAS IAM url: https://dodas-iam.cloud.cnaf.infn.it/ Warning The trailing / in the issuer is very important! Don't forget it. Then you will asked for the following: 1 2 This issuer supports the following scopes: openid profile email address phone offline_access Space delimited list of scopes or 'max' [ openid profile offline_access ] : You can just type ENTER since the suggested scopes are sufficient for our purposes. After that, you will get the following output: 1 2 3 4 5 6 7 8 Registering Client ... Generating account configuration ... accepted Using a browser on another device, visit: https://dodas-iam.cloud.cnaf.infn.it/device And enter the code: UU2F47 As suggested, open your browser and follow the link, then enter the code. You will be asked to approve the registered client as shown in the image below. After your approval, the oidc_gen command will automatically move to the next step allowing you to set an optional password for configuration encryption: 1 2 Enter encryption password for account configuration 'dodas' : Confirm encryption Password:","title":"Account Configuration"},{"location":"orchestrator/oidc_agent/#test-the-configuration","text":"In order to verify the correct setup, try to get a token using the oidc-token command: 1 oidc-token dodas If everything is working fine you will get your token in the command output. E.g.: 1 2 $ oidc-token dodas eyJraWQiOiJyc2ExIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIyMzc0MzI5NC1jODg0LTQyMTAtYjAzMy05MGFkNWFhMTcwZDgiLCJpc3MiOiJodHRwczpcL1wvZG9kYXMtaWFtLmNsb3VkLmNuYWYuaW5mbi5pdFwvIiwiZXhwIjoxNTc0MzUyMDY3LCJpYXQiOjE1NzQzNDg0NjcsImp0aSI6ImNmZTcxNTVkLTNlNWMtNDNiNy04MDZiLTM2MTVhZTJmNWJlYSJ9.B9WovoH0dnuOqoLKlOCcSzrshTpADzdtAf_J_kapPGpj4eI_TkKVk-r_trefPACv_fI656UukCcK5aJtv4_vn6iiAy2x0nCy6lwNNhCJcYJHmn2n-XaqeT6-YM9tyMFjKFusXMLVIoGAQAt_RlfivX8kpNXAmEsEUgOTwHPp9yc","title":"Test the configuration"},{"location":"orchestrator/orchent/","text":"\u25c0 Setup orchent orchent is a command line tool to ease the interaction with the PaaS Orchestrator. Admin and user guides are available here Verify installation 1 orchent --version Configuration orchent needs to use a valid (IAM) access token to authorize itself against the orchestrator. For this purpose, orchent is integrated with oidc-agent so that you don't need to provide the token each time. You need to configure the following environment variable in your .bashrc : 1 export ORCHENT_AGENT_ACCOUNT = dodas Moreover, you need to configure the Orchestrator URL you want to connect to: 1 export ORCHENT_URL = https://dodas-paas.cloud.ba.infn.it/orchestrator Then load the environment again: 1 source ~/.bashrc Test it! Verify that everything is working fine as follows orchent has a simple way to test if the url points to an orchestrator: orchent test The expected output is looks like the orchent url is valid . list your deployments: orchent depls -c me The expected output will show your deployment list (that can be empty of course: retrieving deployment list: )","title":"Configure orchent"},{"location":"orchestrator/orchent/#_1","text":"","title":"\u25c0"},{"location":"orchestrator/orchent/#setup-orchent","text":"orchent is a command line tool to ease the interaction with the PaaS Orchestrator. Admin and user guides are available here","title":"Setup orchent"},{"location":"orchestrator/orchent/#verify-installation","text":"1 orchent --version","title":"Verify installation"},{"location":"orchestrator/orchent/#configuration","text":"orchent needs to use a valid (IAM) access token to authorize itself against the orchestrator. For this purpose, orchent is integrated with oidc-agent so that you don't need to provide the token each time. You need to configure the following environment variable in your .bashrc : 1 export ORCHENT_AGENT_ACCOUNT = dodas Moreover, you need to configure the Orchestrator URL you want to connect to: 1 export ORCHENT_URL = https://dodas-paas.cloud.ba.infn.it/orchestrator Then load the environment again: 1 source ~/.bashrc","title":"Configuration"},{"location":"orchestrator/orchent/#test-it","text":"Verify that everything is working fine as follows orchent has a simple way to test if the url points to an orchestrator: orchent test The expected output is looks like the orchent url is valid . list your deployments: orchent depls -c me The expected output will show your deployment list (that can be empty of course: retrieving deployment list: )","title":"Test it!"},{"location":"orchestrator/overview/","text":"\u25c0 INDIGO-DC PaaS orchestrator The INDIGO PaaS Orchestrator allows to instantiate resources on Cloud Management Frameworks (like OpenStack and OpenNebula) platforms based on deployment requests that are expressed through templates written in TOSCA YAML Simple Profile v1.0 , and deploys them on the best cloud site available.","title":"Overview"},{"location":"orchestrator/overview/#_1","text":"","title":"\u25c0"},{"location":"orchestrator/overview/#indigo-dc-paas-orchestrator","text":"The INDIGO PaaS Orchestrator allows to instantiate resources on Cloud Management Frameworks (like OpenStack and OpenNebula) platforms based on deployment requests that are expressed through templates written in TOSCA YAML Simple Profile v1.0 , and deploys them on the best cloud site available.","title":"INDIGO-DC PaaS orchestrator"},{"location":"orchestrator/tosca_blocks/","text":"\u25c0 Let's build our first template describing a compute node. We will use the indigo custom type tosca.nodes.indigo.Compute reported below. Look at the full definition here . Before reading the example tab, try to write down the node template respecting the node type definition. Then compare it with the example. tosca indigo.Compute type 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 tosca.nodes.indigo.Compute : derived_from : tosca.nodes.indigo.MonitoredCompute attributes : private_address : type : list entry_schema : type : string public_address : type : list entry_schema : type : string ctxt_log : type : string capabilities : scalable : type : tosca.capabilities.indigo.Scalable os : type : tosca.capabilities.indigo.OperatingSystem endpoint : type : tosca.capabilities.indigo.Endpoint host : type : tosca.capabilities.indigo.Container valid_source_types : [ tosca.nodes.SoftwareComponent ] \" TOSCA node template (example) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 server_node : type : tosca.nodes.indigo.Compute capabilities : scalable : properties : count : 1 endpoint : properties : network_name : PUBLIC ports : http : protocol : tcp source : 80 host : properties : num_cpus : 1 mem_size : 2 os : properties : distribution : ubuntu type : linux version : 16.04 Info Pay attention at the endpoint capability that specifies the network configuration and the exposed ports. Now let try to add the inputs section in order to allow the customization of the deployment. For example, we could provide input values for the node resources (cpu, ram). Attention Don't forget: the tag tosca_definitions_version: tosca_simple_yaml_1_0 that must appear at the beginning of the template the imports tag: 1 2 imports : - indigo_custom_types : https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/custom_types.yaml 1 Click on the \"TOSCA template\" tab to see a possible solution. TOSCA template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 tosca_definitions_version : tosca_simple_yaml_1_0 imports : - indigo_custom_types : https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/custom_types.yaml description : > Launch a compute node getting the IP and SSH credentials to access via ssh topology_template : inputs : num_cpus : type : integer description : Number of virtual cpus for the VM default : 1 constraints : - valid_values : [ 1 , 2 , 4 ] mem_size : type : scalar-unit.size description : Amount of memory for the VM default : 2 GB constraints : - valid_values : [ 2 GB , 4 GB ] num_instances : type : integer description : Number of VMs to be spawned default : 1 os_distribution : type : string default : ubuntu node_templates : simple_node : type : tosca.nodes.indigo.Compute capabilities : endpoint : properties : network_name : PUBLIC scalable : properties : count : { get_input : num_instances } host : properties : num_cpus : { get_input : num_cpus } mem_size : { get_input : mem_size } os : properties : distribution : { get_input : os_distribution } type : linux outputs : node_ip : value : { get_attribute : [ simple_node , public_address , 0 ] } node_creds : value : { get_attribute : [ simple_node , endpoint , credential , 0 ] }","title":"Hello world TOSCA template"},{"location":"orchestrator/tosca_blocks/#_1","text":"Let's build our first template describing a compute node. We will use the indigo custom type tosca.nodes.indigo.Compute reported below. Look at the full definition here . Before reading the example tab, try to write down the node template respecting the node type definition. Then compare it with the example. tosca indigo.Compute type 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 tosca.nodes.indigo.Compute : derived_from : tosca.nodes.indigo.MonitoredCompute attributes : private_address : type : list entry_schema : type : string public_address : type : list entry_schema : type : string ctxt_log : type : string capabilities : scalable : type : tosca.capabilities.indigo.Scalable os : type : tosca.capabilities.indigo.OperatingSystem endpoint : type : tosca.capabilities.indigo.Endpoint host : type : tosca.capabilities.indigo.Container valid_source_types : [ tosca.nodes.SoftwareComponent ] \" TOSCA node template (example) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 server_node : type : tosca.nodes.indigo.Compute capabilities : scalable : properties : count : 1 endpoint : properties : network_name : PUBLIC ports : http : protocol : tcp source : 80 host : properties : num_cpus : 1 mem_size : 2 os : properties : distribution : ubuntu type : linux version : 16.04 Info Pay attention at the endpoint capability that specifies the network configuration and the exposed ports. Now let try to add the inputs section in order to allow the customization of the deployment. For example, we could provide input values for the node resources (cpu, ram). Attention Don't forget: the tag tosca_definitions_version: tosca_simple_yaml_1_0 that must appear at the beginning of the template the imports tag: 1 2 imports : - indigo_custom_types : https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/custom_types.yaml 1 Click on the \"TOSCA template\" tab to see a possible solution. TOSCA template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 tosca_definitions_version : tosca_simple_yaml_1_0 imports : - indigo_custom_types : https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/custom_types.yaml description : > Launch a compute node getting the IP and SSH credentials to access via ssh topology_template : inputs : num_cpus : type : integer description : Number of virtual cpus for the VM default : 1 constraints : - valid_values : [ 1 , 2 , 4 ] mem_size : type : scalar-unit.size description : Amount of memory for the VM default : 2 GB constraints : - valid_values : [ 2 GB , 4 GB ] num_instances : type : integer description : Number of VMs to be spawned default : 1 os_distribution : type : string default : ubuntu node_templates : simple_node : type : tosca.nodes.indigo.Compute capabilities : endpoint : properties : network_name : PUBLIC scalable : properties : count : { get_input : num_instances } host : properties : num_cpus : { get_input : num_cpus } mem_size : { get_input : mem_size } os : properties : distribution : { get_input : os_distribution } type : linux outputs : node_ip : value : { get_attribute : [ simple_node , public_address , 0 ] } node_creds : value : { get_attribute : [ simple_node , endpoint , credential , 0 ] }","title":"\u25c0"},{"location":"orchestrator/tosca_usage_guide/","text":"\u25c0 TOSCA Usage Guide TOSCA Grammar Simplified topology template 1 2 3 4 5 6 7 8 topology_template : description : <template_description> inputs : <input_parameter_list> outputs : <output_parameter_list> node_templates : <node_template_list> outputs : <output_list> policies : - <policy_definition_list> Node template A Node template is an instance of a specified Node Type and can provide customized properties, constraints or operations which override the defaults provided by its Node Type and its implementations. 1 2 3 4 5 6 7 8 9 10 11 12 <node_template_name> : type : <node_type_name> properties : <property_definitions> requirements : <requirement_definitions> capabilities : <capability_definitions> interfaces : <interface_definitions> artifacts : <artifacts_definitions> interface_definitions : represents the optional list of interface definitions for the Node Template that augment those provided by its declared Node Type. artifact_definitions : represents the optional list of artifact definitions for the Node Template that augment those provided by its declared Node Type. Node type 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <node_type_name> : derived_from : <parent_node_type_name> description : <node_type_description> properties : <property_definitions> attributes : <attribute_definitions> requirements : - <requirement_definition_1> ... - <requirement_definition_n> capabilities : <capability_definitions> interfaces : <interface_definitions> artifacts : <artifact_definitions> Example tosca.nodes.Root The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 tosca.nodes.Root : description : The TOSCA Node Type all other TOSCA base Node Types derive from attributes : tosca_id : type : string tosca_name : type : string state : type : string capabilities : feature : type : tosca.capabilities.Node requirements : - dependency : capability : tosca.capabilities.Node node : tosca.nodes.Root relationship : tosca.relationships.DependsOn occurrences : [ 0 , UNBOUNDED ] interfaces : Standard : type : tosca.interfaces.node.lifecycle.Standard tosca.nodes.Compute 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 tosca.nodes.Compute : derived_from : tosca.nodes.Root attributes : private_address : type : string public_address : type : string networks : type : map entry_schema : type : tosca.datatypes.network.NetworkInfo ports : type : map entry_schema : type : tosca.datatypes.network.PortInfo requirements : - local_storage : capability : tosca.capabilities.Attachment node : tosca.nodes.BlockStorage relationship : tosca.relationships.AttachesTo occurrences : [ 0 , UNBOUNDED ] capabilities : host : type : tosca.capabilities.Container valid_source_types : [ tosca.nodes.SoftwareComponent ] endpoint : type : tosca.capabilities.Endpoint.Admin os : type : tosca.capabilities.OperatingSystem scalable : type : tosca.capabilities.Scalable binding : type : tosca.capabilities.network.Bindable Capability Type 1 2 3 4 5 <capability_type_name> : derived_from : <parent_capability_type_name> description : <capability_description> properties : <property_definitions> Example tosca.capabilities.Container 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 tosca.capabilities.Container : derived_from : tosca.capabilities.Root properties : num_cpus : type : integer required : false constraints : - greater_or_equal : 1 cpu_frequency : type : scalar-unit.frequency required : false constraints : - greater_or_equal : 0.1 GHz disk_size : type : scalar-unit.size required : false constraints : - greater_or_equal : 0 MB mem_size : type : scalar-unit.size required : false constraints : - greater_or_equal : 0 MB Relationship Type 1 2 3 4 5 6 7 8 9 10 <relationship_type_name> : derived_from : <parent_relationship_type_name> description : <relationship_description> properties : <property_definitions> attributes : <attribute_definitions> interfaces : <interface_definitions> valid_target_types : [ <entity_name_or_type_1> , ... , <entity_name_or_type_n> ] The basic relationship types are: dependsOn : abstract type and its sub types: hostedOn : a node is contained within another connectsTo : a node has a connection configured to another Functions get_input The get_input function is used to retrieve the values of properties declared within the inputs section of a TOSCA Service Template. Grammar 1 get_input : <input_property_name> example 1 2 3 4 5 6 7 8 inputs : cpus : type : integer node_templates : my_server : type : tosca.nodes.Compute properties : num_cpus : { get_input : cpus } get_property The get_property function is used to retrieve property values between modelable entities defined in the same service template. Use this function for inputs parameters. Grammar 1 get_property : [ <modelable_entity_name | SELF | SOURCE | TARGET | HOST> , [ <capability_name> ], <property_path> ] example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 node_templates : mysql_database : type : tosca.nodes.Database properties : name : sql_database1 wordpress : type : tosca.nodes.WebApplication.WordPress ... interfaces : Standard : configure : inputs : wp_db_name : { get_property : [ mysql_database , name ] } get_attribute The get_attribute function is used to retrieve the values of named attributes declared by the referenced node or relationship template name. Grammar 1 get_attribute : [ <modelable_entity_name | SELF | SOURCE | TARGET | HOST> , <attribute_name> ] concat The concat function is used to concatenate two or more string values within a TOSCA service template. Grammar 1 concat : [ <string_value_expressions_*> ] example 1 2 3 4 5 6 7 outputs : description : Concatenate the URL for a server from other template values server_url : value : { concat : [ 'http://' , get_attribute : [ server , public_address ], ':' , get_attribute : [ server , port ] ] }","title":"TOSCA Usage Guide"},{"location":"orchestrator/tosca_usage_guide/#_1","text":"","title":"\u25c0"},{"location":"orchestrator/tosca_usage_guide/#tosca-usage-guide","text":"","title":"TOSCA Usage Guide"},{"location":"orchestrator/tosca_usage_guide/#tosca-grammar","text":"","title":"TOSCA Grammar"},{"location":"orchestrator/tosca_usage_guide/#simplified-topology-template","text":"1 2 3 4 5 6 7 8 topology_template : description : <template_description> inputs : <input_parameter_list> outputs : <output_parameter_list> node_templates : <node_template_list> outputs : <output_list> policies : - <policy_definition_list>","title":"Simplified topology template"},{"location":"orchestrator/tosca_usage_guide/#node-template","text":"A Node template is an instance of a specified Node Type and can provide customized properties, constraints or operations which override the defaults provided by its Node Type and its implementations. 1 2 3 4 5 6 7 8 9 10 11 12 <node_template_name> : type : <node_type_name> properties : <property_definitions> requirements : <requirement_definitions> capabilities : <capability_definitions> interfaces : <interface_definitions> artifacts : <artifacts_definitions> interface_definitions : represents the optional list of interface definitions for the Node Template that augment those provided by its declared Node Type. artifact_definitions : represents the optional list of artifact definitions for the Node Template that augment those provided by its declared Node Type.","title":"Node template"},{"location":"orchestrator/tosca_usage_guide/#node-type","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <node_type_name> : derived_from : <parent_node_type_name> description : <node_type_description> properties : <property_definitions> attributes : <attribute_definitions> requirements : - <requirement_definition_1> ... - <requirement_definition_n> capabilities : <capability_definitions> interfaces : <interface_definitions> artifacts : <artifact_definitions>","title":"Node type"},{"location":"orchestrator/tosca_usage_guide/#example","text":"tosca.nodes.Root The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 tosca.nodes.Root : description : The TOSCA Node Type all other TOSCA base Node Types derive from attributes : tosca_id : type : string tosca_name : type : string state : type : string capabilities : feature : type : tosca.capabilities.Node requirements : - dependency : capability : tosca.capabilities.Node node : tosca.nodes.Root relationship : tosca.relationships.DependsOn occurrences : [ 0 , UNBOUNDED ] interfaces : Standard : type : tosca.interfaces.node.lifecycle.Standard tosca.nodes.Compute 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 tosca.nodes.Compute : derived_from : tosca.nodes.Root attributes : private_address : type : string public_address : type : string networks : type : map entry_schema : type : tosca.datatypes.network.NetworkInfo ports : type : map entry_schema : type : tosca.datatypes.network.PortInfo requirements : - local_storage : capability : tosca.capabilities.Attachment node : tosca.nodes.BlockStorage relationship : tosca.relationships.AttachesTo occurrences : [ 0 , UNBOUNDED ] capabilities : host : type : tosca.capabilities.Container valid_source_types : [ tosca.nodes.SoftwareComponent ] endpoint : type : tosca.capabilities.Endpoint.Admin os : type : tosca.capabilities.OperatingSystem scalable : type : tosca.capabilities.Scalable binding : type : tosca.capabilities.network.Bindable","title":"Example"},{"location":"orchestrator/tosca_usage_guide/#capability-type","text":"1 2 3 4 5 <capability_type_name> : derived_from : <parent_capability_type_name> description : <capability_description> properties : <property_definitions>","title":"Capability Type"},{"location":"orchestrator/tosca_usage_guide/#example_1","text":"tosca.capabilities.Container 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 tosca.capabilities.Container : derived_from : tosca.capabilities.Root properties : num_cpus : type : integer required : false constraints : - greater_or_equal : 1 cpu_frequency : type : scalar-unit.frequency required : false constraints : - greater_or_equal : 0.1 GHz disk_size : type : scalar-unit.size required : false constraints : - greater_or_equal : 0 MB mem_size : type : scalar-unit.size required : false constraints : - greater_or_equal : 0 MB","title":"Example"},{"location":"orchestrator/tosca_usage_guide/#relationship-type","text":"1 2 3 4 5 6 7 8 9 10 <relationship_type_name> : derived_from : <parent_relationship_type_name> description : <relationship_description> properties : <property_definitions> attributes : <attribute_definitions> interfaces : <interface_definitions> valid_target_types : [ <entity_name_or_type_1> , ... , <entity_name_or_type_n> ] The basic relationship types are: dependsOn : abstract type and its sub types: hostedOn : a node is contained within another connectsTo : a node has a connection configured to another","title":"Relationship Type"},{"location":"orchestrator/tosca_usage_guide/#functions","text":"","title":"Functions"},{"location":"orchestrator/tosca_usage_guide/#get_input","text":"The get_input function is used to retrieve the values of properties declared within the inputs section of a TOSCA Service Template. Grammar 1 get_input : <input_property_name> example 1 2 3 4 5 6 7 8 inputs : cpus : type : integer node_templates : my_server : type : tosca.nodes.Compute properties : num_cpus : { get_input : cpus }","title":"get_input"},{"location":"orchestrator/tosca_usage_guide/#get_property","text":"The get_property function is used to retrieve property values between modelable entities defined in the same service template. Use this function for inputs parameters. Grammar 1 get_property : [ <modelable_entity_name | SELF | SOURCE | TARGET | HOST> , [ <capability_name> ], <property_path> ] example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 node_templates : mysql_database : type : tosca.nodes.Database properties : name : sql_database1 wordpress : type : tosca.nodes.WebApplication.WordPress ... interfaces : Standard : configure : inputs : wp_db_name : { get_property : [ mysql_database , name ] }","title":"get_property"},{"location":"orchestrator/tosca_usage_guide/#get_attribute","text":"The get_attribute function is used to retrieve the values of named attributes declared by the referenced node or relationship template name. Grammar 1 get_attribute : [ <modelable_entity_name | SELF | SOURCE | TARGET | HOST> , <attribute_name> ]","title":"get_attribute"},{"location":"orchestrator/tosca_usage_guide/#concat","text":"The concat function is used to concatenate two or more string values within a TOSCA service template. Grammar 1 concat : [ <string_value_expressions_*> ] example 1 2 3 4 5 6 7 outputs : description : Concatenate the URL for a server from other template values server_url : value : { concat : [ 'http://' , get_attribute : [ server , public_address ], ':' , get_attribute : [ server , port ] ] }","title":"concat"}]}